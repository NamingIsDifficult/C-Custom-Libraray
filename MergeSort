/归并排序
        public static void MergeSort(ref List<long> numbs, bool isOrderAsc = true)
        {
            //1.创建一个与输入序列长度相同的空序列，令序列长度为length，令sortedSequenceLength=1,mergeLevel=1,preResidual=null跳转至步骤2
            //2.如果sortedSequenceLength<length,跳转至步骤3，否则跳转至步骤5
            //3.令分组groupCount=length/sortedSequenceLength*2,sequenceCount = length/sortedSequenceLength,将相邻的序列长度为sortedSequence的分组进行合并，sortedSequenceLength*=2，mergeLevel+=1
            //，如果sequenceCount为奇数，跳转至步骤4，否则返回步骤2；
            //4.如果preResidual不为null,将多出来的一个分组与preResidual进行合并，否则覆盖,返回步骤2.
            //5.算法结束。
            int length = numbs.Count, sortedSequenceLength = 1, mergeLevel = 1;
            MergeSortIndex preRedisidual = null;
            var displacementList = new List<long>(length);
            List<long> finalTargetList = null;
            for (int index = 0; index < length; index++)
            {
                displacementList.Add(0);
            }
            for (; sortedSequenceLength < length; sortedSequenceLength *= 2)
            {
                var groupLength = sortedSequenceLength*2;
                var sequenceCount = length/sortedSequenceLength;
                var groupCount = length/groupLength;
                var sourceList = mergeLevel%2 == 0 ? displacementList : numbs;
                var targetList = mergeLevel%2 == 0 ? numbs : displacementList;
                for (var groupIndex = 0; groupIndex < groupCount; groupIndex++)
                {
                    var startIndex = groupIndex*groupLength;
                    Merge(sourceList, targetList,
                        new MergeSortIndex {StartIndex = startIndex, EndIndex = startIndex + sortedSequenceLength - 1},
                        new MergeSortIndex
                        {
                            StartIndex = startIndex + sortedSequenceLength,
                            EndIndex = startIndex + groupLength - 1
                        },
                        new MergeSortIndex {StartIndex = startIndex, EndIndex = startIndex + groupLength - 1},
                        isOrderAsc);
                }
                if (sequenceCount%2 != 0)
                {
                    var startIndex = (sequenceCount - 1)*sortedSequenceLength;
                    if (preRedisidual == null)
                    {
                        preRedisidual = new MergeSortIndex
                        {
                            StartIndex = startIndex,
                            EndIndex = length - 1
                        };
                        for (int index = startIndex; index < length; index++)
                        {
                            targetList[index] = sourceList[index];
                        }
                    }
                    else
                    {
                        Merge(sourceList, targetList,
                            new MergeSortIndex
                            {
                                StartIndex = startIndex,
                                EndIndex = startIndex + sortedSequenceLength - 1
                            },
                            new MergeSortIndex
                            {
                                StartIndex = preRedisidual.StartIndex,
                                EndIndex = length - 1
                            },
                            new MergeSortIndex {StartIndex = startIndex, EndIndex = length - 1}, isOrderAsc);
                        preRedisidual.StartIndex = startIndex;
                    }
                }
                finalTargetList = targetList;
                mergeLevel++;
            }
            numbs =finalTargetList;
        }

        private static void Merge(List<long> sourceList, List<long> targetList, MergeSortIndex index1,
            MergeSortIndex index2, MergeSortIndex container, bool isOrderAsc = true)
        {
            for (var index = container.StartIndex; index <= container.EndIndex; index++)
            {
                var array1IsEmpty = index1.StartIndex > index1.EndIndex;
                var array2IsEmpty = index2.StartIndex > index2.EndIndex;
                if (!array1IsEmpty && !array2IsEmpty)
                {
                    var val1 = sourceList[index1.StartIndex];
                    var val2 = sourceList[index2.StartIndex];
                    if (isOrderAsc ? val1 < val2 : val1 > val2)
                    {
                        targetList[index] = val1;
                        index1.StartIndex += 1;
                    }
                    else
                    {
                        targetList[index] = val2;
                        index2.StartIndex += 1;
                    }
                }
                else if (array1IsEmpty && !array2IsEmpty)
                {
                    targetList[index] = sourceList[index2.StartIndex];
                    index2.StartIndex += 1;
                }
                else if (!array1IsEmpty)
                {
                    targetList[index] = sourceList[index1.StartIndex];
                    index1.StartIndex += 1;
                }
            }
        }

        private class MergeSortIndex
        {
            public int StartIndex { get; set; }
            public int EndIndex { get; set; }
        }
